{"name":"Node-activerecord","body":"# node-activerecord\r\n\r\nAn ORM written in Coffeescript that supports multiple database systems (SQL, NoSQL, and even REST), as well as ID generation middleware. It is fully extendable to add new database systems and plugins.\r\n\r\n**Note:** this project is new and is still evolving rapidly. A lot is done, but there is still a lot to do.\r\n\r\n## Install\r\n\r\nnode-activerecord is available in npm:\r\n\r\n```\r\nnpm install activerecord\r\n```\r\n\r\nInstalling node-activerecord will not automatically install the required libraries for every adapter since this could easily make the library very bloated and dependent on things you may or may not need.\r\n\r\n### Adapter Libraries\r\n\r\nYou can use npm to install the required libraries for each adapter:\r\n\r\n<table>\r\n  <tr>\r\n    <th>Adapter</th>\r\n    <th>Libraries</th>\r\n  </tr>\r\n  <tr>\r\n    <td>sqlite</td>\r\n    <td>sqlite3</td>\r\n  </tr>\r\n  <tr>\r\n    <td>mysql</td>\r\n    <td>mysql</td>\r\n  </tr>\r\n  <tr>\r\n    <td>redis</td>\r\n    <td>redis</td>\r\n  </tr>\r\n  <tr>\r\n    <td>REST</td>\r\n    <td>restler</td>\r\n  </tr>\r\n</table>\r\n\r\n### ID Middleware Libraries\r\n\r\nYou can also use npm to install the required libraries for any ID generation middleware:\r\n\r\n<table>\r\n  <tr>\r\n    <th>Middleware</th>\r\n    <th>Libraries</th>\r\n  </tr>\r\n  <tr>\r\n    <td>sql</td>\r\n    <td><i>none</i></td>\r\n  </tr>\r\n  <tr>\r\n    <td>redis</td>\r\n    <td>redis</td>\r\n  </tr>\r\n</table>\r\n\r\n### Built-In Plugins\r\n\r\n<table>\r\n  <tr>\r\n    <th>Plugin</th>\r\n    <th>Enabled by Default</th>\r\n    <th>Description</th>\r\n  </tr>\r\n  <tr>\r\n    <td>json</td>\r\n    <td>true</td>\r\n    <td>Allows conversion of a model to a simple JS object and offers field protection</td>\r\n  </tr>\r\n  <tr>\r\n    <td>logger</td>\r\n    <td>false</td>\r\n    <td>A verbose logger that outputs significant logging data to the console</td>\r\n  </tr>\r\n</table>\r\n\r\n## Examples\r\n\r\n**Configuration**\r\n\r\nBy default, ActiveRecord assumes SQL ID middleware. This means it checks for the last generated auto-increment ID on the primary key.\r\n\r\n``` coffeescript\r\nActiveRecord = require 'activerecord'\r\n\r\nmodule.exports = new ActiveRecord.Configuration\r\n  sqlite:\r\n    database: \"#{__dirname}/test.db\"\r\n  mysql:\r\n    host: 'localhost'\r\n    database: 'test'\r\n    user: 'test'\r\n    password: 'password'\r\n  middleware:\r\n    redis:\r\n      host: 'localhost'\r\n```\r\n\r\n**Model Definition**\r\n\r\n``` coffeescript\r\nActiveRecord = require 'activerecord'\r\nconfig = require __dirname + \"/config\"\r\n\r\n# Note: uses sqlite3 by default\r\nclass User extends ActiveRecord.Model\r\n  config: config\r\n  fields: ['id', 'username', 'name']\r\n```\r\n\r\n**Creating a Record**\r\n\r\n``` coffeescript\r\nuser = new User()\r\nuser.username = \"meltingice\"\r\nuser.name = \"Ryan\"\r\nuser.save()\r\n```\r\n\r\n**Retreiving a Record**\r\n\r\n``` coffeescript\r\n# Find by primary ID\r\nUser.find 1, (err, user) -> console.log user.toJSON()\r\n\r\n# Find multiple by primary ID\r\nUser.findAll [1, 2], (err, users) ->\r\n  console.log user.toJSON() for user in users\r\n\r\n# Find by custom query\r\nUser.find \"SELECT * FROM users WHERE id < ?\", 5, (err, user) ->\r\n  console.log user.toJSON()\r\n```\r\n\r\n**Updating a Record**\r\n\r\n``` coffeescript\r\nUser.find 1, (err, user) ->\r\n  user.name = \"Bob\"\r\n  user.save (err) -> console.log \"updated!\"\r\n```\r\n\r\n**Deleting a Record**\r\n\r\n``` coffeescript\r\nUser.find 1, (err, user) ->\r\n  user.delete (err) -> console.log \"deleted!\"\r\n```\r\n\r\n**Model Relations**\r\n\r\n``` coffeescript\r\nclass User extends ActiveRecord.Model\r\n  config: config\r\n  fields: ['id', 'username', 'name']\r\n  hasMany: -> [\r\n    Message\r\n  ]\r\n\r\nclass Message extends ActiveRecord.Model\r\n  config: config\r\n  fields: ['id', 'user_id', 'text']\r\n  belongsTo: -> [\r\n    User\r\n  ]\r\n\r\nMessage.find 1, (message) ->\r\n  message.user (err, user) ->\r\n    console.log user.toJSON()\r\n```\r\n\r\n**Non-SQL Middleware**\r\n\r\n``` coffeescript\r\nclass User extends ActiveRecord.Model\r\n  config: config\r\n  idMiddleware: 'redis'\r\n  idMiddlewareOptions:\r\n    key: 'users:id'\r\n\r\n  fields: ['id', 'username', 'name']\r\n```\r\n\r\n**Plugins**\r\n\r\n``` coffeescript\r\nclass AltLogger extends ActiveRecord.Plugin\r\n  messages: []\r\n\r\n  # Callback hooks\r\n  afterCreate: -> messages.push \"Created model for #{@tableName()}\"; true\r\n  afterUpdate: -> messages.push \"Updated model for #{@tableName()}\"; true\r\n\r\n  # Extend the model\r\n  outputLog: -> console.log msg for msg in messages\r\n\r\nclass User extends ActiveRecord.Model\r\n  config: config\r\n  fields: ['id', 'username', 'name']\r\n  plugins: -> [\r\n    'json'\r\n    AltLogger\r\n  ]\r\n\r\nuser = new User name: 'foo', username: 'bar'\r\nuser.save (err) -> user.outputLog()\r\n```","tagline":"A ORM written in Coffeescript that supports multiple database systems (SQL/NoSQL) and ID generation middleware.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}